-- =============================================================================
-- AQUI Platform Database Setup Script V2.1
-- Consolidated and Security-Hardened Database Schema with Performance Optimizations
-- =============================================================================
-- This script creates all necessary tables, indexes, triggers, and RLS policies
-- for the AQUI platform with proper security controls and performance optimizations.
-- Run this script once to set up a new database.
--
-- IMPLEMENTED OPTIMIZATIONS (from promt_fix_2.xml):
-- ✅ T1: Spatial indexes for ~100× faster radius/nearest-vendor queries
-- ✅ T2: JSONB index for search_logs.filters analytics
-- ✅ T3: Email uniqueness constraint in users table
-- ✅ T4: Singleton constraint for platform_settings
-- ✅ T5: Unique constraint for one live session per vendor
-- ✅ T6: Improved permissions hygiene (SELECT-only for vendors)
-- ✅ T7: Password hashing verification note added
-- =============================================================================

BEGIN;

-- =============================================================================
-- ENABLE REQUIRED EXTENSIONS
-- =============================================================================

-- Enable PostGIS extension for geometry support
CREATE EXTENSION IF NOT EXISTS postgis;

-- =============================================================================
-- CORE TABLES (USERS AND VENDORS)
-- =============================================================================

-- Create users table (extends Supabase Auth)
CREATE TABLE IF NOT EXISTS users (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    full_name TEXT,
    avatar_url TEXT,
    email TEXT,
    phone TEXT,
    is_vendor BOOLEAN DEFAULT FALSE,
    is_admin BOOLEAN DEFAULT FALSE,
    active_role TEXT DEFAULT 'customer',
    preferred_language TEXT,
    created_at TIMESTAMP WITHOUT TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- Create vendors table
CREATE TABLE IF NOT EXISTS vendors (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    user_id UUID NOT NULL REFERENCES users(id) ON DELETE CASCADE,
    business_name TEXT NOT NULL,
    description TEXT,
    business_type TEXT,
    subcategory TEXT,
    tags TEXT[],
    profile_image_url TEXT,
    banner_image_url TEXT[],
    contact_email TEXT,
    phone TEXT,
    address TEXT,
    city TEXT,
    latitude DOUBLE PRECISION,
    longitude DOUBLE PRECISION,
    is_active BOOLEAN DEFAULT TRUE,
    is_approved BOOLEAN DEFAULT FALSE,
    approved_by UUID,
    approved_at TIMESTAMP WITHOUT TIME ZONE,
    average_rating NUMERIC DEFAULT 0,
    total_reviews INTEGER DEFAULT 0,
    admin_notes TEXT,
    created_at TIMESTAMP WITHOUT TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITHOUT TIME ZONE DEFAULT NOW()
);

-- =============================================================================
-- ADMIN AND USER MANAGEMENT TABLES
-- =============================================================================

-- Create admin_users table for independent admin authentication
-- NOTE: Ensure password_hash stores Argon2 or bcrypt with cost ≥ 10 (T7)
CREATE TABLE IF NOT EXISTS admin_users (
    id UUID DEFAULT gen_random_uuid() PRIMARY KEY,
    email VARCHAR(255) UNIQUE NOT NULL,
    username VARCHAR(100) UNIQUE NOT NULL,
    password_hash VARCHAR(255) NOT NULL,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- Create favorites table for user-vendor relationships
CREATE TABLE IF NOT EXISTS favorites (
    id UUID DEFAULT gen_random_uuid() PRIMARY KEY,
    customer_id UUID NOT NULL REFERENCES users(id) ON DELETE CASCADE,
    vendor_id UUID NOT NULL REFERENCES vendors(id) ON DELETE CASCADE,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    UNIQUE(customer_id, vendor_id)
);

-- Create reviews table for vendor reviews
CREATE TABLE IF NOT EXISTS reviews (
    id UUID DEFAULT gen_random_uuid() PRIMARY KEY,
    vendor_id UUID REFERENCES vendors(id) ON DELETE CASCADE,
    user_id UUID REFERENCES users(id) ON DELETE CASCADE,
    rating INTEGER CHECK (rating >= 1 AND rating <= 5),
    review TEXT,
    created_at TIMESTAMP WITHOUT TIME ZONE DEFAULT NOW(),
    edited_at TIMESTAMP WITHOUT TIME ZONE
);

-- =============================================================================
-- VENDOR FEATURE TABLES
-- =============================================================================

-- Create vendor_static_locations table for vendor fixed locations
CREATE TABLE IF NOT EXISTS vendor_static_locations (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    vendor_id UUID REFERENCES vendors(id) ON DELETE CASCADE,
    address TEXT,
    latitude DOUBLE PRECISION,
    longitude DOUBLE PRECISION
);

-- Create vendor_announcements table for vendor announcements
CREATE TABLE IF NOT EXISTS vendor_announcements (
    id UUID DEFAULT gen_random_uuid() PRIMARY KEY,
    vendor_id UUID REFERENCES vendors(id) ON DELETE CASCADE,
    message TEXT,
    image_url TEXT,
    created_at TIMESTAMP WITHOUT TIME ZONE DEFAULT NOW()
);

-- Create vendor_specials table for vendor special offers
CREATE TABLE IF NOT EXISTS vendor_specials (
    id UUID DEFAULT gen_random_uuid() PRIMARY KEY,
    vendor_id UUID REFERENCES vendors(id) ON DELETE CASCADE,
    title TEXT,
    description TEXT,
    image_url TEXT,
    created_at TIMESTAMP WITHOUT TIME ZONE DEFAULT NOW()
);

-- Create vendor_live_sessions table for real-time vendor locations
CREATE TABLE IF NOT EXISTS vendor_live_sessions (
    id UUID DEFAULT gen_random_uuid() PRIMARY KEY,
    vendor_id UUID REFERENCES vendors(id) ON DELETE CASCADE,
    start_time TIMESTAMP WITHOUT TIME ZONE NOT NULL,
    end_time TIMESTAMP WITHOUT TIME ZONE,
    was_scheduled_duration INTEGER,
    estimated_customers INTEGER DEFAULT 0,
    latitude DOUBLE PRECISION,
    longitude DOUBLE PRECISION,
    address TEXT,
    is_active BOOLEAN DEFAULT true,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    auto_end_time TIMESTAMP WITHOUT TIME ZONE,
    ended_by TEXT DEFAULT 'vendor'
);

-- Create vendor_reports table for reporting vendors
CREATE TABLE IF NOT EXISTS vendor_reports (
    id UUID DEFAULT gen_random_uuid() PRIMARY KEY,
    vendor_id UUID NOT NULL REFERENCES vendors(id) ON DELETE CASCADE,
    reporter_id UUID NOT NULL REFERENCES users(id) ON DELETE CASCADE,
    reason TEXT NOT NULL,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    resolved BOOLEAN DEFAULT false,
    resolution_notes TEXT
);

-- =============================================================================
-- ANALYTICS AND TRACKING TABLES
-- =============================================================================

-- Create analytics_exports table for data export tracking
CREATE TABLE IF NOT EXISTS analytics_exports (
    id UUID DEFAULT gen_random_uuid() PRIMARY KEY,
    admin_id UUID REFERENCES admin_users(id) ON DELETE CASCADE,
    vendor_id UUID REFERENCES vendors(id) ON DELETE CASCADE,
    export_type TEXT,
    created_at TIMESTAMP WITHOUT TIME ZONE DEFAULT NOW(),
    status TEXT DEFAULT 'pending',
    download_url TEXT
);

-- Create customer_on_the_way table for tracking customer journeys
CREATE TABLE IF NOT EXISTS customer_on_the_way (
    id UUID DEFAULT gen_random_uuid() PRIMARY KEY,
    vendor_id UUID REFERENCES vendors(id) ON DELETE CASCADE,
    user_id UUID REFERENCES users(id) ON DELETE CASCADE,
    clicked_at TIMESTAMP WITHOUT TIME ZONE DEFAULT NOW(),
    customer_latitude DOUBLE PRECISION,
    customer_longitude DOUBLE PRECISION
);

-- Create customer_reports table for customer feedback/reports
CREATE TABLE IF NOT EXISTS customer_reports (
    id UUID DEFAULT gen_random_uuid() PRIMARY KEY,
    reporter_id UUID NOT NULL REFERENCES users(id) ON DELETE CASCADE,
    vendor_id UUID REFERENCES vendors(id) ON DELETE CASCADE,
    issue TEXT NOT NULL,
    created_at TIMESTAMP WITHOUT TIME ZONE DEFAULT NOW(),
    resolved BOOLEAN DEFAULT false,
    resolution_notes TEXT
);

-- Create vendor_feedback table for vendor feedback
CREATE TABLE IF NOT EXISTS vendor_feedback (
    id UUID DEFAULT gen_random_uuid() PRIMARY KEY,
    vendor_id UUID REFERENCES vendors(id) ON DELETE CASCADE,
    message TEXT,
    status TEXT DEFAULT 'pending',
    created_at TIMESTAMP WITHOUT TIME ZONE DEFAULT NOW()
);

-- Create vendor_hours table for vendor operating hours
CREATE TABLE IF NOT EXISTS vendor_hours (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    vendor_id UUID REFERENCES vendors(id) ON DELETE CASCADE,
    weekday INTEGER,
    open_time TIME WITHOUT TIME ZONE,
    close_time TIME WITHOUT TIME ZONE
);

-- Create moderation_logs table for admin moderation tracking
CREATE TABLE IF NOT EXISTS moderation_logs (
    id UUID DEFAULT gen_random_uuid() PRIMARY KEY,
    admin_id UUID REFERENCES admin_users(id) ON DELETE CASCADE,
    vendor_id UUID REFERENCES vendors(id) ON DELETE CASCADE,
    action TEXT,
    notes TEXT,
    created_at TIMESTAMP WITHOUT TIME ZONE DEFAULT NOW()
);

-- Create platform_settings table for platform configuration
CREATE TABLE IF NOT EXISTS platform_settings (
    id BOOLEAN NOT NULL DEFAULT true PRIMARY KEY,
    allow_auto_vendor_approval BOOLEAN DEFAULT false,
    maintenance_mode BOOLEAN DEFAULT false,
    updated_at TIMESTAMP WITHOUT TIME ZONE DEFAULT NOW()
);

-- Create review_reports table for reporting reviews
CREATE TABLE IF NOT EXISTS review_reports (
    id UUID DEFAULT gen_random_uuid() PRIMARY KEY,
    review_id UUID REFERENCES reviews(id) ON DELETE CASCADE,
    vendor_id UUID REFERENCES vendors(id) ON DELETE CASCADE,
    reason TEXT,
    created_at TIMESTAMP WITHOUT TIME ZONE DEFAULT NOW(),
    resolved BOOLEAN DEFAULT false
);

-- Create search_logs table for search analytics
CREATE TABLE IF NOT EXISTS search_logs (
    id UUID DEFAULT gen_random_uuid() PRIMARY KEY,
    user_id UUID REFERENCES users(id) ON DELETE CASCADE,
    search_query TEXT,
    filters JSONB,
    location GEOMETRY,
    searched_at TIMESTAMP WITHOUT TIME ZONE DEFAULT NOW(),
    vendor_clicked UUID REFERENCES vendors(id) ON DELETE CASCADE
);

-- =============================================================================
-- INDEXES FOR PERFORMANCE
-- =============================================================================

-- Users indexes
CREATE INDEX IF NOT EXISTS idx_users_email ON users(email);
CREATE INDEX IF NOT EXISTS idx_users_is_vendor ON users(is_vendor);
CREATE INDEX IF NOT EXISTS idx_users_is_admin ON users(is_admin);
CREATE INDEX IF NOT EXISTS idx_users_active_role ON users(active_role);

-- Vendors indexes
CREATE INDEX IF NOT EXISTS idx_vendors_user_id ON vendors(user_id);
CREATE INDEX IF NOT EXISTS idx_vendors_business_name ON vendors(business_name);
CREATE INDEX IF NOT EXISTS idx_vendors_business_type ON vendors(business_type);
CREATE INDEX IF NOT EXISTS idx_vendors_is_active ON vendors(is_active);
CREATE INDEX IF NOT EXISTS idx_vendors_is_approved ON vendors(is_approved);
CREATE INDEX IF NOT EXISTS idx_vendors_city ON vendors(city);
CREATE INDEX IF NOT EXISTS idx_vendors_coordinates ON vendors(latitude, longitude);
CREATE INDEX IF NOT EXISTS idx_vendors_rating ON vendors(average_rating);

-- Admin users indexes
CREATE INDEX IF NOT EXISTS idx_admin_users_username ON admin_users(username);
CREATE INDEX IF NOT EXISTS idx_admin_users_email ON admin_users(email);

-- Favorites indexes
CREATE INDEX IF NOT EXISTS idx_favorites_customer_id ON favorites(customer_id);
CREATE INDEX IF NOT EXISTS idx_favorites_vendor_id ON favorites(vendor_id);

-- Reviews indexes
CREATE INDEX IF NOT EXISTS idx_reviews_vendor_id ON reviews(vendor_id);
CREATE INDEX IF NOT EXISTS idx_reviews_user_id ON reviews(user_id);
CREATE INDEX IF NOT EXISTS idx_reviews_rating ON reviews(rating);
CREATE INDEX IF NOT EXISTS idx_reviews_created_at ON reviews(created_at);

-- Vendor features indexes
CREATE INDEX IF NOT EXISTS idx_vendor_static_locations_vendor_id ON vendor_static_locations(vendor_id);
CREATE INDEX IF NOT EXISTS idx_vendor_static_locations_coordinates ON vendor_static_locations(latitude, longitude);
CREATE INDEX IF NOT EXISTS idx_vendor_announcements_vendor_id ON vendor_announcements(vendor_id);
CREATE INDEX IF NOT EXISTS idx_vendor_announcements_created_at ON vendor_announcements(created_at);
CREATE INDEX IF NOT EXISTS idx_vendor_specials_vendor_id ON vendor_specials(vendor_id);
CREATE INDEX IF NOT EXISTS idx_vendor_specials_created_at ON vendor_specials(created_at);
CREATE INDEX IF NOT EXISTS idx_vendor_live_sessions_vendor_id ON vendor_live_sessions(vendor_id);
CREATE INDEX IF NOT EXISTS idx_vendor_live_sessions_active ON vendor_live_sessions(vendor_id, is_active);
CREATE INDEX IF NOT EXISTS idx_vendor_reports_vendor_id ON vendor_reports(vendor_id);
CREATE INDEX IF NOT EXISTS idx_vendor_reports_reporter_id ON vendor_reports(reporter_id);

-- Analytics indexes
CREATE INDEX IF NOT EXISTS idx_analytics_exports_admin_id ON analytics_exports(admin_id);
CREATE INDEX IF NOT EXISTS idx_analytics_exports_status ON analytics_exports(status);
CREATE INDEX IF NOT EXISTS idx_customer_on_the_way_user_id ON customer_on_the_way(user_id);
CREATE INDEX IF NOT EXISTS idx_customer_on_the_way_vendor_id ON customer_on_the_way(vendor_id);
CREATE INDEX IF NOT EXISTS idx_customer_reports_reporter_id ON customer_reports(reporter_id);
CREATE INDEX IF NOT EXISTS idx_customer_reports_vendor_id ON customer_reports(vendor_id);

-- Additional table indexes
CREATE INDEX IF NOT EXISTS idx_vendor_feedback_vendor_id ON vendor_feedback(vendor_id);
CREATE INDEX IF NOT EXISTS idx_vendor_feedback_status ON vendor_feedback(status);
CREATE INDEX IF NOT EXISTS idx_vendor_hours_vendor_id ON vendor_hours(vendor_id);
CREATE INDEX IF NOT EXISTS idx_moderation_logs_admin_id ON moderation_logs(admin_id);
CREATE INDEX IF NOT EXISTS idx_moderation_logs_vendor_id ON moderation_logs(vendor_id);
CREATE INDEX IF NOT EXISTS idx_review_reports_review_id ON review_reports(review_id);
CREATE INDEX IF NOT EXISTS idx_review_reports_vendor_id ON review_reports(vendor_id);
CREATE INDEX IF NOT EXISTS idx_search_logs_user_id ON search_logs(user_id);
CREATE INDEX IF NOT EXISTS idx_search_logs_searched_at ON search_logs(searched_at);



-- =============================================================================
-- SPATIAL INDEXES FOR GEOSPATIAL QUERIES (T1)
-- =============================================================================

-- Vendors spatial index for radius/nearest-vendor queries
CREATE INDEX IF NOT EXISTS idx_vendors_geo
  ON vendors
  USING GIST (geography(ST_MakePoint(longitude, latitude)));

-- Static locations spatial index
CREATE INDEX IF NOT EXISTS idx_vendor_static_geo
  ON vendor_static_locations
  USING GIST (geography(ST_MakePoint(longitude, latitude)));

-- Live sessions spatial index
CREATE INDEX IF NOT EXISTS idx_live_sessions_geo
  ON vendor_live_sessions
  USING GIST (geography(ST_MakePoint(longitude, latitude)));

-- Search logs spatial index
CREATE INDEX IF NOT EXISTS idx_search_logs_geo
  ON search_logs
  USING GIST (location);

-- =============================================================================
-- JSONB INDEX FOR ANALYTICS (T2)
-- =============================================================================

-- JSONB index for search_logs.filters analytics
CREATE INDEX IF NOT EXISTS idx_search_logs_filters_gin
  ON search_logs
  USING GIN (filters);

-- =============================================================================
-- CONSTRAINTS FOR DATA INTEGRITY (T3, T4, T5)
-- =============================================================================

-- Email uniqueness in users table (T3)
ALTER TABLE users ADD CONSTRAINT IF NOT EXISTS uniq_users_email UNIQUE(email);

-- Singleton platform_settings constraint (T4)
ALTER TABLE platform_settings ADD CONSTRAINT IF NOT EXISTS chk_platform_settings_singleton CHECK (id = true);

-- One live session per vendor constraint (T5)
CREATE UNIQUE INDEX IF NOT EXISTS uniq_live_active
  ON vendor_live_sessions(vendor_id)
  WHERE is_active;

-- =============================================================================
-- TRIGGERS FOR AUTOMATIC TIMESTAMP UPDATES
-- =============================================================================

-- Create or replace the update timestamp function
CREATE OR REPLACE FUNCTION update_updated_at_column()
RETURNS TRIGGER AS $$
BEGIN
    NEW.updated_at = NOW();
    RETURN NEW;
END;
$$ language 'plpgsql';

-- Apply triggers to tables with updated_at columns
CREATE TRIGGER update_admin_users_updated_at BEFORE UPDATE ON admin_users FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();
CREATE TRIGGER update_users_updated_at BEFORE UPDATE ON users FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();
CREATE TRIGGER update_vendors_updated_at BEFORE UPDATE ON vendors FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();
CREATE TRIGGER update_platform_settings_updated_at BEFORE UPDATE ON platform_settings FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();

-- =============================================================================
-- ROW LEVEL SECURITY (RLS) POLICIES - SECURITY HARDENED
-- =============================================================================

-- Enable RLS on all tables
ALTER TABLE users ENABLE ROW LEVEL SECURITY;
ALTER TABLE vendors ENABLE ROW LEVEL SECURITY;
ALTER TABLE admin_users ENABLE ROW LEVEL SECURITY;
ALTER TABLE favorites ENABLE ROW LEVEL SECURITY;
ALTER TABLE reviews ENABLE ROW LEVEL SECURITY;
ALTER TABLE vendor_static_locations ENABLE ROW LEVEL SECURITY;
ALTER TABLE vendor_announcements ENABLE ROW LEVEL SECURITY;
ALTER TABLE vendor_specials ENABLE ROW LEVEL SECURITY;
ALTER TABLE vendor_live_sessions ENABLE ROW LEVEL SECURITY;
ALTER TABLE vendor_reports ENABLE ROW LEVEL SECURITY;
ALTER TABLE analytics_exports ENABLE ROW LEVEL SECURITY;
ALTER TABLE customer_on_the_way ENABLE ROW LEVEL SECURITY;
ALTER TABLE customer_reports ENABLE ROW LEVEL SECURITY;
ALTER TABLE vendor_feedback ENABLE ROW LEVEL SECURITY;
ALTER TABLE vendor_hours ENABLE ROW LEVEL SECURITY;
ALTER TABLE moderation_logs ENABLE ROW LEVEL SECURITY;
ALTER TABLE platform_settings ENABLE ROW LEVEL SECURITY;
ALTER TABLE review_reports ENABLE ROW LEVEL SECURITY;
ALTER TABLE search_logs ENABLE ROW LEVEL SECURITY;

-- Users: Users can view and update their own profile
CREATE POLICY "Users can view all user profiles" ON users
    FOR SELECT USING (true);
CREATE POLICY "Users can update their own profile" ON users
    FOR UPDATE USING (auth.uid() = id);

-- Vendors: Public read access, only vendor owners can modify
CREATE POLICY "Anyone can view vendor profiles" ON vendors
    FOR SELECT USING (true);
CREATE POLICY "Vendors can manage their own profile" ON vendors
    FOR ALL USING (auth.uid() = user_id);

-- Admin users: Only accessible by service role
CREATE POLICY "Admin users are only accessible by service role" ON admin_users
    FOR ALL USING (auth.role() = 'service_role');

-- Favorites: Users can only access their own favorites
CREATE POLICY "Users can view their own favorites" ON favorites
    FOR SELECT USING (auth.uid() = customer_id);
CREATE POLICY "Users can insert their own favorites" ON favorites
    FOR INSERT WITH CHECK (auth.uid() = customer_id);
CREATE POLICY "Users can delete their own favorites" ON favorites
    FOR DELETE USING (auth.uid() = customer_id);

-- Reviews: Public read access, users can only modify their own reviews
CREATE POLICY "Users can view all reviews" ON reviews
    FOR SELECT USING (true);
CREATE POLICY "Users can insert their own reviews" ON reviews
    FOR INSERT WITH CHECK (auth.uid() = user_id);
CREATE POLICY "Users can update their own reviews" ON reviews
    FOR UPDATE USING (auth.uid() = user_id);
CREATE POLICY "Users can delete their own reviews" ON reviews
    FOR DELETE USING (auth.uid() = user_id);

-- Vendor Static Locations: Public read access, only vendor owners can modify
CREATE POLICY "Anyone can view vendor static locations" ON vendor_static_locations
    FOR SELECT USING (true);
CREATE POLICY "Vendors can manage their own static locations" ON vendor_static_locations
    FOR ALL USING (
        EXISTS (
            SELECT 1 FROM vendors 
            WHERE vendors.id = vendor_static_locations.vendor_id 
            AND vendors.user_id = auth.uid()
        )
    );

-- Vendor Announcements: Public read access, only vendor owners can modify
CREATE POLICY "Anyone can view vendor announcements" ON vendor_announcements
    FOR SELECT USING (true);
CREATE POLICY "Vendors can manage their own announcements" ON vendor_announcements
    FOR ALL USING (
        EXISTS (
            SELECT 1 FROM vendors 
            WHERE vendors.id = vendor_announcements.vendor_id 
            AND vendors.user_id = auth.uid()
        )
    );

-- Vendor Specials: Public read access, only vendor owners can modify
CREATE POLICY "Anyone can view vendor specials" ON vendor_specials
    FOR SELECT USING (true);
CREATE POLICY "Vendors can manage their own specials" ON vendor_specials
    FOR ALL USING (
        EXISTS (
            SELECT 1 FROM vendors 
            WHERE vendors.id = vendor_specials.vendor_id 
            AND vendors.user_id = auth.uid()
        )
    );

-- Vendor Live Sessions: Public read access, only vendor owners can modify
CREATE POLICY "Anyone can view live sessions" ON vendor_live_sessions
    FOR SELECT USING (true);
CREATE POLICY "Vendors can manage their own sessions" ON vendor_live_sessions
    FOR ALL USING (
        EXISTS (
            SELECT 1 FROM vendors 
            WHERE vendors.id = vendor_live_sessions.vendor_id 
            AND vendors.user_id = auth.uid()
        )
    );

-- Vendor Reports: Users can insert, only report creators can view their own reports
CREATE POLICY "Users can insert vendor reports" ON vendor_reports
    FOR INSERT WITH CHECK (auth.uid() = reporter_id);
CREATE POLICY "Users can view their own reports" ON vendor_reports
    FOR SELECT USING (auth.uid() = reporter_id);

-- Analytics Exports: Only accessible by service role
CREATE POLICY "Analytics exports are only accessible by service role" ON analytics_exports
    FOR ALL USING (auth.role() = 'service_role');

-- Customer On The Way: Users can only access their own tracking data
CREATE POLICY "Users can manage their own tracking" ON customer_on_the_way
    FOR ALL USING (auth.uid() = user_id)
    WITH CHECK (auth.uid() = user_id);

-- Customer Reports: Users can insert and view their own reports
CREATE POLICY "Users can insert customer reports" ON customer_reports
    FOR INSERT WITH CHECK (auth.uid() = reporter_id);
CREATE POLICY "Users can view their own customer reports" ON customer_reports
    FOR SELECT USING (auth.uid() = reporter_id);

-- Vendor Feedback: Vendors can manage their own feedback
CREATE POLICY "Vendors can manage their own feedback" ON vendor_feedback
    FOR ALL USING (
        EXISTS (
            SELECT 1 FROM vendors 
            WHERE vendors.id = vendor_feedback.vendor_id 
            AND vendors.user_id = auth.uid()
        )
    );

-- Vendor Hours: Public read access, only vendor owners can modify
CREATE POLICY "Anyone can view vendor hours" ON vendor_hours
    FOR SELECT USING (true);
CREATE POLICY "Vendors can manage their own hours" ON vendor_hours
    FOR ALL USING (
        EXISTS (
            SELECT 1 FROM vendors 
            WHERE vendors.id = vendor_hours.vendor_id 
            AND vendors.user_id = auth.uid()
        )
    );

-- Moderation Logs: Only accessible by service role
CREATE POLICY "Moderation logs are only accessible by service role" ON moderation_logs
    FOR ALL USING (auth.role() = 'service_role');

-- Platform Settings: Only accessible by service role
CREATE POLICY "Platform settings are only accessible by service role" ON platform_settings
    FOR ALL USING (auth.role() = 'service_role');

-- Review Reports: Users can insert, only accessible by service role for management
CREATE POLICY "Users can insert review reports" ON review_reports
    FOR INSERT WITH CHECK (auth.uid() = reporter_id);
CREATE POLICY "Review reports are manageable by service role" ON review_reports
    FOR SELECT USING (auth.role() = 'service_role');

-- Search Logs: Users can only access their own search logs
CREATE POLICY "Users can manage their own search logs" ON search_logs
    FOR ALL USING (auth.uid() = user_id)
    WITH CHECK (auth.uid() = user_id);

-- =============================================================================
-- SECURE PERMISSIONS - NO OVERLY PERMISSIVE GRANTS
-- =============================================================================

-- Grant basic schema usage
GRANT USAGE ON SCHEMA public TO authenticated;
GRANT USAGE ON SCHEMA public TO service_role;

-- Grant permissions for core tables (controlled by RLS policies)
GRANT SELECT, UPDATE ON users TO authenticated;
GRANT SELECT ON vendors TO authenticated;
GRANT SELECT ON reviews TO authenticated;
GRANT SELECT ON vendor_static_locations TO authenticated;
GRANT SELECT ON vendor_announcements TO authenticated;
GRANT SELECT ON vendor_specials TO authenticated;
GRANT SELECT ON vendor_live_sessions TO authenticated;
GRANT SELECT ON vendor_hours TO authenticated;

-- Grant specific permissions for user-owned data (controlled by RLS)
GRANT SELECT, INSERT, UPDATE, DELETE ON favorites TO authenticated;
GRANT SELECT, INSERT, UPDATE, DELETE ON reviews TO authenticated;
GRANT INSERT ON vendor_reports TO authenticated;
GRANT SELECT, INSERT, UPDATE, DELETE ON customer_on_the_way TO authenticated;
GRANT INSERT ON customer_reports TO authenticated;
GRANT INSERT ON review_reports TO authenticated;
GRANT SELECT, INSERT, UPDATE, DELETE ON search_logs TO authenticated;

-- Grant vendor-specific permissions (controlled by RLS)
GRANT INSERT, UPDATE, DELETE ON vendor_static_locations TO authenticated;
GRANT INSERT, UPDATE, DELETE ON vendor_announcements TO authenticated;
GRANT INSERT, UPDATE, DELETE ON vendor_specials TO authenticated;
GRANT INSERT, UPDATE, DELETE ON vendor_live_sessions TO authenticated;
GRANT SELECT, INSERT, UPDATE, DELETE ON vendor_feedback TO authenticated;
GRANT INSERT, UPDATE, DELETE ON vendor_hours TO authenticated;

-- Service role has full access (bypasses RLS)
GRANT ALL ON ALL TABLES IN SCHEMA public TO service_role;
GRANT ALL ON ALL SEQUENCES IN SCHEMA public TO service_role;
GRANT ALL ON ALL FUNCTIONS IN SCHEMA public TO service_role;

COMMIT;

-- =============================================================================
-- SETUP COMPLETE
-- =============================================================================
-- This script creates all necessary tables for the AQUI platform with
-- security-hardened RLS policies that ensure only resource owners can
-- modify their data. Admin operations use the service role key.
-- =============================================================================